{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset238 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 /* ******* RECOMMENDED Audacity Settings: 22'050 Hz, 8 bit PCM **********\par
\par
// Sound files converted with: {{\field{\*\fldinst{HYPERLINK https://bitluni.net/wp-content/uploads/2018/01/Audio2Header.html }}{\fldrslt{https://bitluni.net/wp-content/uploads/2018/01/Audio2Header.html\ul0\cf0}}}}\f0\fs22\par
// converter code by bitluni (send him a high five, if you like the code)\par
\par
Recommended parts & settings for Tank  IS-1 on 36 pin prototype board!!!!\par
\par
ESC: HOBBYWING QUICRUN WP Crawler Brushed with the following settings:\par
1: 3\par
2: 1\par
3: 3\par
4: 3\par
5: 4\par
6: 2\par
7: 9\par
8: 1\par
9: 8 (change it, important)\par
10: 4\par
11: 4\par
12: 5\par
13: 4\par
14: 1 (be careful here!!)\par
15: 1 (change it, important)\par
\par
Motor: 540 size, 35 turns, stock pinion\par
\par
// ********************************************************************************************************************* */\par
// Choose the board version\par
#define PROTOTYPE_36 // 36 or 30 pin board (do not uncomment it or it will cause boot issues!)\par
\par
// ---------------------------------------------------------------------------------------------------------------------\par
// Choose the receiver communication mode (never uncomment more than one! If all commented out = classic PWM RC signal communication)--\par
// SBUS communication --------\par
//#define SBUS_COMMUNICATION // control signals are coming in via the SBUS interface (comment it out for classic RC signals)\par
boolean sbusInverted = true; // false = wired to NPN transistor signal inverter or uninverted SBUS signal (for example from "Micro RC" receiver)\par
\par
// Serial communication --------\par
//#define SERIAL_COMMUNICATION // control signals are coming in via the serial interface (comment it out for classic RC signals)\par
// Only for my "Micro RC" receiver! See: {{\field{\*\fldinst{HYPERLINK https://github.com/TheDIYGuy999/Micro_RC_Receiver }}{\fldrslt{https://github.com/TheDIYGuy999/Micro_RC_Receiver\ul0\cf0}}}}\f0\fs22\par
\par
// PPM communication --------\par
//#define PPM_COMMUNICATION // control signals are coming in via the PPM interface (comment it out for classic RC signals)\par
#define NUM_OF_CHL 8          // The number of channels inside our PPM signal (usually max. 8)\par
#define NUM_OF_AVG 1          // Number of averaging passes (usually one, more will be slow)\par
\par
// Sound files (22'050 Hz, 8 bit PCM recommended) -----------------------------------------------------------------------\par
// Choose the start sound (uncomment the one you want) --------\par
volatile int startVolumePercentage = 150; // Adjust the start volume (usually = 100%)\par
//#include "sounds/UnionPacific2002Start.h" // Union Pacific 2002 SD70M Locomotive Start\par
//#include "sounds/ScaniaV8Start.h" // Scania V8 Start\par
//#include "sounds/ScaniaR500V8Start.h" // Scania R500 V8 Start\par
//#include "sounds/ScaniaV8StartNew.h" // Scania V8 Start\par
//#include "sounds/UralV8Start.h" // Ural 4320 V8 Start (use it for Diesel trucks, if no other is available) use it for King Hauler\par
//#include "sounds/HgP408Start.h" // HG P408 Humvee Diesel (only for small speakers)\par
//#include "sounds/DefenderV8Start.h" // Land Rover Defender V8 Start\par
//#include "sounds/JaguarXjsHeStart.h" // Jaguar XJS HE Starts\par
//#include "sounds/KenworthW900Start.h" // Kenworth W900 Truck Start\par
//#include "sounds/MackStart.h" // Mack Truck Start\par
//#include "sounds/DetroitDieselStart.h" // Detroit Diesel generic Truck Start\par
//#include "sounds/InternationalDT-466Start.h" // International DT-466 Start\par
//#include "sounds/Cat3406BStart.h" // Caterpillar 3406B start\par
//#include "sounds/ActrosV8Start.h" // MB Actros V8 Truck Start\par
//#include "sounds/VWBeetleStart.h" // VW Beetle or Bug\par
//#include "sounds/HarleyDavidsonFXSBStart.h" // Harley Davidson FXSB start\par
//#include "sounds/v8soundteststart.h" // Wombii's Scania V8 Fire Truck start\par
//#include "sounds/JeepGrandCherokeeTrackhawkStart.h" // Jeep Grand Cherokee Trackhawk start\par
//#include "sounds/carCranking.h" // Generic car cranking\par
#include "sounds/TankStart3.h" // my tank start sound\par
\par
// Choose the motor idle sound (uncomment the one you want) --------\par
volatile int idleVolumePercentage = 50; // Adjust the idle volume (usually = 100%, more also working, depending on sound, 50 - 60% if additional diesel knock sound is used)\par
volatile int engineIdleVolumePercentage = 80; // the engine volume will be throttle dependent (usually = 40%, never more than 100%!)\par
//#include "sounds/20Hz.h" // 20Hz test tone\par
//#include "sounds/100Hz.h" // 100Hz test tone\par
//#include "sounds/1000Hz.h" // 1000Hz test tone\par
//#include "sounds/UnionPacific2002Idle.h" // Union Pacific 2002 SD70M Locomotive with 16 cylinder Diesel (set volume to 60%)\par
//#include "sounds/ScaniaV8Idle.h" // Scania V8 (bad quality)\par
//#include "sounds/ScaniaR500V8Idle.h" // Scania R500 V8\par
//#include "sounds/ScaniaV8IdleNew.h" // Scania V8 (Volume 100%, 35%, Turbo 70%, 10%, Wastegate 50%, 1%, CEP 100, TSM 2)\par
//#include "sounds/ScaniaV8IdleNewWarm.h" // Scania V8 (Volume 55%, 40%, Turbo 70%, 10%, Wastegate 200%, 1%, CEP 100, TSM 3, Knock volume 600, 10%, interval 1, 150) the best one!\par
//#include "sounds/ScaniaR620V8Idle2.h" // Scania R620 V8 (a bit thin, add about 80% turbo volume)\par
//#include "sounds/ScaniaR620Uphill.h" // Scania R620 V8 going uphill, typical knock - knock under load\par
//#include "sounds/ScaniaR620Uphill2.h" // Scania R620 V8 going uphill, typical knock - knock under load (this one is better, Volume 180%, 20%, Turbo 60%, 10%, Wastegate 50%, 1%, CEP 100, TSM 2)\par
//#include "sounds/SCANIAV850TonIdle.h" // 50 ton SCANIA going uphill @ very low rpm (Volume 60%, 40%, Turbo 40%, 10, Wastegate 100%, 1%, CEP 100, TSM 2, Knock volume 600, 0%, interval 4, 50)\par
//#include "sounds/UralV8Idle.h" // Ural 4320 V8\par
//#include "sounds/HumveeDieselIdle.h" // "Humvvee" (Hummer H1) V8 Diesel\par
//#include "sounds/HgP408Idle.h" // HG P408 Humvee Diesel (only for small speakers)\par
//#include "sounds/DetroitDieselIdle.h" // Detroit Diesel generic Truck (Volume 80%, 30%, Turbo 60%, 10%, Wastegate 50%, 1%, CEP 100, TSM 3)\par
//#include "sounds/DetroitDieselStraightPipeIdle.h" // Detroit Diesel Truck with straight pipes (use multiplier = 2, acc = 2, dec = 1)\par
//#include "sounds/DetroitDieselBassBoost15db.h" // Detroit Diesel Truck with straight pipes. Bass 100-200Hz + 15dB\par
//#include "sounds/DetroitDieselBassBoost7db.h" // Detroit Diesel Truck with straight pipes. Bass 100-200Hz + 7dB (use it for King Hauler, Volume 60%, 40%, Turbo 60%, 10, Wastegate 100%, 1%, CEP 100, TSM 3, Knock volume 400, 10%, interval 2, 50)\par
//#include "sounds/DetroitDieselPeterbiltCabover.h" // Detroit Diesel Peterbilt cabover truck\par
//#include "sounds/DetroitDieselKenworth.h" // Detroit Diesel Kenworth truck (use Ural V8 Start & 100% turbo)\par
//#include "sounds/DetroitDieselJohnDeereTractor.h" // Detroit Diesel John Deere tractor\par
//#include "sounds/InternationalDT-466Idle.h" // International DT-466 idle (Volume 100%, 35%, Turbo 60%, 10%, Wastegate 30%, 1%, CEP 100, TSM 3)\par
//#include "sounds/Cat3406BIdle.h" // NO Caterpillar 3406B idle (Volume 100%, 35%, Turbo 70%, 10%, Wastegate 30%, 1%, CEP 100, TSM 3)\par
//#include "sounds/M35Idle.h" // AM General M35 Truck\par
//#include "sounds/M35BassBoost7db.h" // AM General M35 Truck Bass 100-200Hz + 7dB (Volume 100%, 35%, Turbo 100%, 30%)\par
//#include "sounds/UnimogU1000TurboFullLoad.h" // Unimog U1000 Turbo (Volume 100%, 35%, Turbo 50%, 10%, Wastegate 150%, 1%)\par
//#include "sounds/ActrosV8Idle.h" // MB Actros V8 Truck Idle (very noisy)\par
//#include "sounds/ActrosLoggingTruckIdling.h" // Actros logging truck (Volume 80%, 40%, Turbo 60%, 10, Wastegate 100%, 1%, CEP 100, TSM 2, Knock volume 200, 10%, interval 4, 50)\par
//#include "sounds/ActrosLoggingTruckIdling2.h" // Actros logging truck (Volume 50%, 100%, Turbo 10%, 10, Wastegate 100%, 1%, CEP 100, TSM 3, Knock volume 500, 10%, interval 2, 50, ActrosLoggingTruckDieselKnock3.h)\par
//#include "sounds/KenworthW900Idle.h" // Kenworth W900 Truck Idle (Volume 80%, 30%, Turbo 60%, 10%, Wastegate 50%, 1%, CEP 100, TSM 2)\par
//#include "sounds/MackIdle.h" // Mack Truck Idle (very thin)\par
//#include "sounds/Tatra813Idle.h" // Tatra 813 8x8 air cooled V12 Diesel (Volume 80%, 50%, Turbo 0%, 0, Fan 250, 0, 250, No Wastegate, CEP 100, TSM 2, Knock volume 500, 0%, interval 2, 50)\par
//#include "sounds/DefenderV8Idle.h" // Land Rover Defender V8 (Volume 100%, 40%, Turbo 0%, 0, Fan 0, 0, 250, No Wastegate, CEP 100, TSM 2, Knock volume 500, 0%, interval 2, 50, automatic = true)\par
//#include "sounds/Mustang68Idle.h" // Ford Mustang 1968\par
//#include "sounds/DodgeChallenger70Idle.h" // 1970 Dodge Challenger\par
//#include "sounds/MgBGtV8Idle.h" // MG B GT V8\par
//#include "sounds/LaFerrariIdle.h" // Ferrari "LaFerrari"\par
//#include "sounds/chevyNovaV8Idle.h" // Chevy Nova Coupe 1975\par
//#include "sounds/V8TrophyTruckIdle.h" // V8 Trophy Truck\par
//#include "sounds/JaguarXjsHeIdle.h" // Jaguar XJS HE (bad quality)\par
//#include "sounds/VWBeetleIdle.h" // VW Beetle or Bug\par
//#include "sounds/HarleyDavidsonFXSBIdle.h" // Harley Davidson FXSB (Volume 60%, 40%, Turbo 0%, 10,  no Wastegate 100%, CEP 300, TSM 4, Knock volume 300, 10%, interval 2, 50)\par
//#include "sounds/v8soundtestidle.h" // Wombii's Scania V8 Fire Truck (Volume 90%, 50%, Turbo 20%, 10, Wastegate 90%, 1%, CEP 100, TSM 3, Knock volume 350, 15%, interval 4, 10, ScaniaDieselKnock.h)\par
//#include "sounds/JeepGrandCherokeeTrackhawkIdle.h" // Jeep Grand Cherokee Trackhawk idle (speaker with good bass required)\par
//#include "sounds/DAFXFIdle.h" // DAF XF truck (use International DT 466 start, ADAPTIVE_KNOCK_VOLUME, dieselKnockInterval = 3, dieselKnockAdaptiveVolumePercentage = 60)\par
#include "sounds/Tankmotorsound.h" // my tank idle sound  \par
//#include "sounds/IS1motorIdle.h" // my tank idle sound\par
\par
// Choose the motor revving sound (experimental, uncomment the one you want) --------\par
//#define REV_SOUND // uncomment this, if you want to use the separate, optional rev sound\par
volatile int revVolumePercentage = 150; // Adjust the idle volume (usually = 100%, more also working, depending on sound)\par
volatile int engineRevVolumePercentage = 30; // the engine volume will be throttle dependent (usually = 40%, never more than 100%!)\par
const uint8_t revSwitchPoint = 250; // The rev sound is played instead of the idle sound above this point\par
#ifdef REV_SOUND\par
//#include "sounds/ScaniaV8Rev.h" // Scania V8\par
#include "sounds/TankRevving.h" // Tank\par
#endif\par
\par
// Choose the Diesel (or whatever) ignition "knock" sound (played in the fixed sampling rate interrupt, uncomment the one you want,\par
// play around here, the results are amazing, if you hit the right combination with the idle sound!) --------\par
volatile int dieselKnockVolumePercentage = 300; // Adjust the Diesel knock volume (usually = 200 - 600%)\par
volatile int dieselKnockIdleVolumePercentage = 20; // Diesel knock volume while idling (usually = 20%)\par
volatile int dieselKnockInterval = 3; // Idle sample length divided by this number (1 - 20, depending on sound files)\par
volatile int dieselKnockStartPoint = 20; // Volume will raise above this point ( usually 0, for "open pipe" exhaust about 250)\par
#define ADAPTIVE_KNOCK_VOLUME // Experimental setting: only the first knock per engine cycle will be full volume!\par
volatile int dieselKnockAdaptiveVolumePercentage = 60; // Adjust the Diesel knock volume for the non-first knocks per engine cycle (usually = 50%)\par
//#include "sounds/DieselKnockDummy.h" // If you don't want Diesel knock sound\par
//#include "sounds/ScaniaR620UphillKnock.h" // Scania R620 V8 (use it for King Hauler)\par
//#include "sounds/LanzBulldogDieselKnock.h" // Lanz Bulldog tractor (Interval = 2)\par
//#include "sounds/ScaniaDieselKnock.h" // Strong Scania V8 diesel knock while highway race against Volvo truck (500%, 10%, Interval = 2 possible, for slow running V8 engines)\par
//#include "sounds/ScaniaDieselKnock2.h" // Strong, short Scania V8 diesel knock while highway race against Volvo truck (Interval = 4 possible, for faster running engines)\par
//#include "sounds/Scan\f1\u305?aR730V8DieselKnockShort.h" // Hard knock (400%, 0%, Interval = up to 8 possible, for small engines)\par
//#include "sounds/Scan\u305?aR730V8DieselKnockSlow.h" // Soft knock (500%, 10%, Interval = up to 4 possible, for meduim engines and Scania open pipe (interval = 1))\par
//#include "sounds/SCANIAV850TonKnock.h" // 50 ton SCANIA knock\par
//#include "sounds/ActrosLoggingTruckDieselKnock.h" // Actros logging truck\par
//#include "sounds/ActrosLoggingTruckDieselKnock2.h" // Actros logging truck\par
//#include "sounds/ActrosLoggingTruckDieselKnock3.h" // Actros logging truck (same as idle, for testing)\par
//#include "sounds/Tatra813Knock.h" // Tatra 813 8x8 air cooled V12 Diesel\par
//#include "sounds/Tatra813Roar.h" // Tatra 813 8x8 air cooled V12 Diesel (use this for 813)\par
//#include "sounds/Tatra813RoarShort.h" // Tatra 813 8x8 air cooled V12 Diesel\par
//#include "sounds/HarleyDavidsonFXSBKnock.h" // Harley Davidson FXSB knock\par
//#include "sounds/DefenderV8Knock.h" // Land Rover Defender V8 knock (experimental, don't use it)\par
//#include "sounds/DefenderV8Knock2.h" // Land Rover Defender V8 knock (experimental, don't use it)\par
//#include "sounds/DefenderV8Knock3.h" // Land Rover Defender V8 knock (experimental, don't use it)\par
//#include "sounds/DefenderV8Knock4.h" // Land Rover Defender V8 knock (experimental, don't use it)\par
//#include "sounds/chevyNovaV8Knock.h" // Chevy Nova Coupe 1975\par
//#include "sounds/JeepGrandCherokeeTrackhawkKnock.h" // Jeep Grand Cherokee Trackhawk knock\par
#include "sounds/DAFXFKnock.h" // DAF XF truck\par
\par
// Adjust the additional turbo sound (set "turboVolumePercentage" to "0", if you don't want it) --------\par
volatile int turboVolumePercentage = 0; // Adjust the turbo volume (usually = 70%)\par
volatile int turboIdleVolumePercentage = 10; // the turbo volume will be engine rpm dependent (usually = 10%)\par
#include "sounds/TurboWhistle.h" // Turbo sound, playing in parallel with engine sound!\par
\par
// Adjust the additional turbo wastegate  / blowoff valve  sound (set "wastegateVolumePercentage" to "0", if you don't want it)--------\par
volatile int wastegateVolumePercentage = 0; // Adjust the wastegate volume (usually = 70%, up to 250%)\par
volatile int wastegateIdleVolumePercentage = 1; // Wastegate sound is played, after rapid throttle drop with engaged clutch\par
//#include "sounds/WastegateDummy.h"\par
#include "sounds/UnimogU1000TurboWastegate.h"\par
//#include "sounds/Scan\u305?aR730V8TurboWastegate.h"\par
\par
// Adjust the additional cooling fan sound (set "fanVolumePercentage" to "0", if you don't want it) --------\par
volatile int fanVolumePercentage = 0; // Adjust the fan volume (250% for Tatra 813, else 0%)\par
volatile int fanIdleVolumePercentage = 0; // the fan volume will be engine rpm dependent (usually = 10%)\par
volatile int fanStartPoint = 250; // Volume will raise above this point (250 for Tatra 813)\par
//#include "sounds/Tatra813Fan.h" // Tatra 813 8x8 V12 Diesel Cooling Fan\par
#include "sounds/Tatra813FanNew.h" // Tatra 813 8x8 V12 Diesel Cooling Fan (use this)\par
//#include "sounds/Tatra813FanNewSlow.h" // Tatra 813 8x8 V12 Diesel Cooling Fan\par
\par
// Choose the horn sound (uncomment the one you want) --------\par
volatile int hornVolumePercentage = 100; // Adjust the horn volume (usually = 100%)\par
//#include "sounds/TrainHorn.h" // American train horn\par
//#include "sounds/HornblastersOUTLAWTrainHornLong.h" // Hornblasters outlaw train horn long\par
//#include "sounds/HornblastersOUTLAWTrainHornShort.h" // Hornblasters outlaw train horn short\par
#include "sounds/ManTgeHorn.h" // MAN TGE truck horn (King Hauler)\par
//#include "sounds/westinghouseHorn.h" // American truck horn (the best)\par
//#include "sounds/FireTruckAirHorn.h" // US fire truck air horn\par
//#include "sounds/CarHorn.h" // A boring car horn\par
//#include "sounds/TruckHorn.h" // A generic truck horn\par
//#include "sounds/PeterbiltHorn.h" // A Peterbilt truck horn\par
//#include "sounds/2ToneTruckHorn.h" // A 2 tone truck horn\par
\par
// Choose the siren / additional horn sound (uncomment the one you want) --------\par
volatile int sirenVolumePercentage = 120; // Adjust the siren volume (usually = 100%)\par
#include "sounds/sirenDummy.h" // If you don't want siren sound\par
//#include "sounds/UsPoliceSiren.h" // US Police siren\par
//#include "sounds/FireTruckAirSiren.h" // US fire truck air siren (King Hauler)\par
//#include "sounds/FeuerwehrMartinshorn.h" // European Feuerwehr Martinshorn\par
//#include "sounds/IrishFireEngineHorn.h" // Irish fire truck horn\par
//#include "sounds/siren01norskere22.h" // Norwegian siren\par
//#include "sounds/PostAutoHorn.h" // The typical Swiss post bus horn\par
\par
// Choose the air brake release sound (uncomment the one you want) --------\par
volatile int brakeVolumePercentage = 150; // Adjust the brake volume (usually = 200%)\par
#include "sounds/AirBrakeDummy.h" // If you don't want air brake sound\par
//#include "sounds/TruckAirBrakes.h" // Short truck air brake sound\par
//#include "sounds/TruckAirBrakesLong.h" // Long truck air brake sound\par
//#include "sounds/TruckAirBrakes2.h" // Another truck air brake sound\par
//#include "sounds/AirBrakeSqueak.h" // Squeaky air brake sound\par
\par
// Choose the parking brake engaging sound (uncomment the one you want) --------\par
volatile int parkingBrakeVolumePercentage = 0; // Adjust the brake volume (usually = 200%)\par
//#include "sounds/ParkingBrakeDummy.h" // If you don't want parking brake sound\par
#include "sounds/ParkingBrakeDummy.h" // Parking brake sound\par
\par
// Choose the gear shifting sound (uncomment the one you want) --------\par
volatile int shiftingVolumePercentage = 200; // Adjust the shifting volume (usually = 200%)\par
//#include "sounds/AirShiftingDummy.h" // If you don't want pneumatic shifting sound\par
//#include "sounds/AirShifting.h" // Pneumatic shifting sound\par
#include "sounds/ClunkingGearShifting.h" // Manual clunking shifting sound\par
\par
// Choose the additional "sound1" (uncomment the one you want) --------\par
volatile int sound1VolumePercentage = 100; // Adjust the sound1 volume (usually = 100%)\par
//#include "sounds/EMDLocomotiveBell.h" // American EMD locomotive bell\par
//#include "sounds/007JamesBond.h" // James Bond melody\par
//#include "sounds/M2Fire.h" // M2 salve\par
//#include "sounds/GlenCanyon.h" // Glen Canyon country song for truckers ;-)\par
#include "sounds/door.h" // opening and closing the door\par
\par
// Choose the reversing beep sound --------\par
volatile int reversingVolumePercentage = 0; // Adjust the reversing sound volume (usually = 70%)\par
#include "sounds/TruckReversingBeep.h" // 1000Hz peep sound\par
\par
// Choose the indicator / turn signal options --------\par
const boolean indicators = false; // "true", if you want to trigger indicator lights (turn signals)\par
volatile int indicatorVolumePercentage = 100; // Adjust the indicator sound volume (usually = 100%)\par
const uint16_t indicatorOn = 300; // The indicator will be switched on above +/- this value, if wheels are turned\par
const boolean INDICATOR_DIR = true; // adjust indicator direction with true or false\par
#include "sounds/Indicator.h" // "Tick-Tack" sound\par
\par
// Choose the blue light options -----------------------------------------------------------------------------------------\par
const boolean doubleFlashBlueLight = true; // double flash blue lights if "true", "rotating" beacons if "false"\par
\par
// PWM input signal range calibration ------------------------------------------------------------------------------------\par
const uint16_t pulseNeutral = 30; // pulseZero +/- this value (30) is the neutral range\par
const uint16_t pulseSpan = 490; // pulseZero +/- this value (max. 500 or less depending on remote signal range)\par
\par
// PWM ESC output signal range calibration (connect crawler type ESC to pin 33)-------------------------------------------\par
const int16_t escPulseSpan = 1000; // pulseZero +/- this value (> 500 = limited top speed, about 1000 for King Hauler, 1400 = 100km/h with 35T motor)\par
const uint8_t escRampTimeFirstGear = 20; // determines, how fast the acceleration and deceleration happens (about 15 - 25, 20 for King Hauler)\par
const uint8_t escRampTimeSecondGear = 50; // 50 for King Hauler (this value is always in use for automatic transmission, about 80)\par
const uint8_t escRampTimeThirdGear = 75; // 75 for King Hauler\par
const uint8_t escBrakeSteps = 30; // determines, how fast the ESC is able to brake down (20 - 30, 30 for King Hauler)\par
const uint8_t escAccelerationSteps = 3; // determines, how fast the ESC is able to accelerate (2 - 3, 3 for King Hauler)\par
\par
// Horn trigger signal type (true / false)-------------------------------------------------------------------------------\par
const boolean pwmSoundTrigger = true; // horn triggered by RC PWM signal instead of constant high level signal, if "true"\par
// Do NOT enable this boolean, if no PWM signal is connected or you will experience huge engine RPM resopnse delays\par
\par
// Gearbox parameters (select number of automatic gears in curves.h)-----------------------------------------------------\par
const boolean automatic = true; // false = linear rpm curve, true = automatic transmission with torque converter is simulated (use it, if you don't have a real shifting transmission)\par
const boolean doubleClutch = false; // do not activate it at the same time as automatic!\par
const boolean shiftingAutoThrottle = true; // For Tamiya 3 speed transmission, throttle is altered for synchronizing, if "true"\par
\par
// Clutch parameters ---------------------------------------------------------------------------------------------------\par
uint16_t clutchEngagingPoint = 90; // CEP. The "clutch" is engaging above this point = engine rpm sound in synch with ESC power (about 100)\par
\par
// Shaker parameters (simulating engine vibrations) ---------------------------------------------------------------------\par
const uint8_t shakerStart = 50; // Shaker power while engine start (max. 255, about 100, 50 with PETG weight)\par
const uint8_t shakerIdle = 50; // Shaker power while idling (max. 255, about 49, 50 with PETG weight)\par
const uint8_t shakerFullThrottle = 35; // Shaker power while full throttle (max. 255, about 42, 35 with PETG weight)\par
const uint8_t shakerStop = 40; // Shaker power while engine stop (max. 255, about 60, 40 with PETG weight)\par
\par
// Engine parameters ----------------------------------------------------------------------------------------------------\par
//Activate for "engine on off" functionality in combination with "Micro RC" Receiver from TheDIYGuy999. No Pulse Zero auto calibration in this case!!\par
const boolean engineManualOnOff = false;\par
\par
// Engine RPM range (2 for big Diesels, 4 for fast running motors)\par
const uint32_t TOP_SPEED_MULTIPLIER = 3; // TSM. RPM multiplier: the bigger the number, the larger the rev range, 2 - 4 is a good place to start. ESP32 will crash, if > 5 @ 22'050Hz!\par
\par
// Engine mass simulation\par
const int8_t acc = 2; // Acceleration step (2) 1 = slow for locomotive engine, 9 = fast for trophy truck\par
const int8_t dec = 1; // Deceleration step (1) 1 = slow for locomotive engine, 5 = fast for trophy truck\f0\par
}
 